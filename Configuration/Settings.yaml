#Neos:
#  EventSourcedContentRepository:
#    contentDimensions: {}

Neos:
  EventSourcing:
    EventStore:
      stores:
        'ContentRepository':
          # By default the DoctrineEventStorage adapter is used, but this can be changed with the following setting:
          storage: 'Neos\EventSourcing\EventStore\Storage\Doctrine\DoctrineEventStorage'

          storageOptions:

            # When using the DoctrineEventStorage adapter events are stored in a table called "neos_eventsourcing_eventstore_events" by default. This can be changed per Event Store:
            eventTableName: 'neos_contentrepository_events'

          # By default the Flow database connection is reused for the EventEvent store backend, but this can be changed per Event Store. Note: BackendOptions will be merged with the Flow default backend options
          #            backendOptions:
          #              driver: pdo_mysql
          #              host: 127.0.0.1
          #              dbname: null
          #              user: null
          #              password: null
          #              charset: utf8

          # Custom mapping types can be configured (only useful when using a _different_ database connection for the Event Store)
#          mappingTypes:
#            'some_custom_type':
#              dbType: 'json_array'
#              className: 'Some\Type\Implementation'


    EventListener:
      listeners:
        'Neos\EventSourcedContentRepository\Domain\Projection\NodeHiddenState\NodeHiddenStateProjector':
          eventStore: 'ContentRepository'
        'Neos\EventSourcedContentRepository\Domain\Projection\Workspace\WorkspaceProjector':
          eventStore: 'ContentRepository'
        'Neos\EventSourcedContentRepository\Domain\Projection\Changes\ChangeProjector':
          eventStore: 'ContentRepository'
